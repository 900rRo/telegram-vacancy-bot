import os

from telegram import Update, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import (
    Application, CommandHandler, MessageHandler, CallbackQueryHandler,
    ConversationHandler, ContextTypes, filters
)

BOT_TOKEN = os.getenv("BOT_TOKEN")
# –ú–æ–∂–Ω–æ –ø–µ—Ä–µ–¥–∞–≤–∞—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ ID —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é, –Ω–∞–ø—Ä–∏–º–µ—Ä "12345678,87654321"
ALLOWED_USERS = list(map(int, os.getenv("TELEGRAM_ID", "").split(",")))
PORT = int(os.environ.get("PORT", 8443))
RENDER_EXTERNAL_URL = os.getenv("RENDER_EXTERNAL_URL")

# –°–æ—Å—Ç–æ—è–Ω–∏—è
SELECT_ACTION, SELECT_CHANNEL, ENTER_VACANCY, CONFIRM_VACANCY, SHOW_INFO, SHOW_SUPPORT = range(6)

CHANNELS = {
    "WorkDrom": "@WorkDrom",
    "–ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –ø–ª—è–∂–µ": "@zarabotoknaplyazhe",
    "–í–∞–∫–∞–Ω—Å–∏–∏ —Ä—è–¥–æ–º": "@Job0pening3"
}

def user_is_allowed(user_id: int) -> bool:
    return user_id in ALLOWED_USERS

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    keyboard = [
        [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="publish")],
        [InlineKeyboardButton("–í–æ–ø—Ä–æ—Å—ã", callback_data="info")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECT_ACTION

async def get_my_id(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    await update.message.reply_text(f"–í–∞—à Telegram ID: {user_id}")

async def ping(context: ContextTypes.DEFAULT_TYPE):
    try:
        # –ü–∏–Ω–≥—É–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤–æ–≥–æ ID –∏–∑ —Å–ø–∏—Å–∫–∞
        if ALLOWED_USERS:
            await context.bot.send_message(chat_id=ALLOWED_USERS[0], text="‚úÖ –Ø —Ä–∞–±–æ—Ç–∞—é!")
    except Exception as e:
        print(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –ø–∏–Ω–≥–∞: {e}")

async def handle_action(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_is_allowed(user_id):
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return

    query = update.callback_query
    await query.answer()

    if query.data == "publish":
        keyboard = [[InlineKeyboardButton(name, callback_data=name)] for name in CHANNELS.keys()]
        keyboard.append([InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")])
        await query.edit_message_text("–í—ã–±–µ—Ä–∏—Ç–µ –∫–∞–Ω–∞–ª –¥–ª—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:", reply_markup=InlineKeyboardMarkup(keyboard))
        return SELECT_CHANNEL

    elif query.data == "info":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        await query.edit_message_text(
            "–ú—ã –ø—É–±–ª–∏–∫—É–µ–º –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç—Ä—ë—Ö Telegram-–∫–∞–Ω–∞–ª–∞—Ö: WorkDrom, –ó–∞—Ä–∞–±–æ—Ç–æ–∫ –Ω–∞ –ø–ª—è–∂–µ –∏ –í–∞–∫–∞–Ω—Å–∏–∏ —Ä—è–¥–æ–º. "
            "–í—ã–±–µ—Ä–∏—Ç–µ ¬´–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é¬ª, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å.",
            reply_markup=InlineKeyboardMarkup(keyboard)
        )
        return SHOW_INFO

    elif query.data == "support":
        keyboard = [[InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]]
        await query.edit_message_text("–ü–æ –≤—Å–µ–º –≤–æ–ø—Ä–æ—Å–∞–º –ø–∏—à–∏—Ç–µ: https://t.me/+Tl8MMZ9tMtEyNzEy",
                                      reply_markup=InlineKeyboardMarkup(keyboard))
        return SHOW_SUPPORT

async def back_to_start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()

    keyboard = [
        [InlineKeyboardButton("–û–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å –≤–∞–∫–∞–Ω—Å–∏—é", callback_data="publish")],
        [InlineKeyboardButton("–í–æ–ø—Ä–æ—Å—ã", callback_data="info")],
        [InlineKeyboardButton("–ü–æ–¥–¥–µ—Ä–∂–∫–∞", callback_data="support")]
    ]
    await query.edit_message_text("–ü—Ä–∏–≤–µ—Ç! –ß—Ç–æ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–¥–µ–ª–∞—Ç—å?", reply_markup=InlineKeyboardMarkup(keyboard))
    return SELECT_ACTION

async def select_channel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_is_allowed(user_id):
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return ConversationHandler.END

    query = update.callback_query
    await query.answer()
    context.user_data['channel'] = query.data

    example_vacancy = (
        "–ü—Ä–∏–º–µ—Ä –≤–∞–∫–∞–Ω—Å–∏–∏:\n\n"
        "üîπ –î–æ–ª–∂–Ω–æ—Å—Ç—å: –ú–µ–Ω–µ–¥–∂–µ—Ä –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º\n"
        "üîπ –ú–µ—Å—Ç–æ–ø–æ–ª–æ–∂–µ–Ω–∏–µ: –ú–æ—Å–∫–≤–∞\n"
        "üîπ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è: –û–ø—ã—Ç —Ä–∞–±–æ—Ç—ã –æ—Ç 1 –≥–æ–¥–∞, —É–≤–µ—Ä–µ–Ω–Ω—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –ü–ö, –∫–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å.\n"
        "üîπ –£—Å–ª–æ–≤–∏—è: –û—Ñ–∏—Ü–∏–∞–ª—å–Ω–æ–µ —Ç—Ä—É–¥–æ—É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ, —Å—Ç–∞–±–∏–ª—å–Ω–∞—è –∑–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞, –∫–∞—Ä—å–µ—Ä–Ω—ã–π —Ä–æ—Å—Ç.\n"
        "üîπ –ó–∞—Ä–∞–±–æ—Ç–Ω–∞—è –ø–ª–∞—Ç–∞: 50,000 - 60,000 —Ä—É–±–ª–µ–π\n\n"
        "–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏ –≤ —Ç–∞–∫–æ–º –∂–µ —Ñ–æ—Ä–º–∞—Ç–µ."
    )

    await query.edit_message_text(
        f"–í—ã –≤—ã–±—Ä–∞–ª–∏ –∫–∞–Ω–∞–ª: {query.data}\n\n{example_vacancy}\n\n–¢–µ–ø–µ—Ä—å –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç –≤–∞–∫–∞–Ω—Å–∏–∏."
    )
    return ENTER_VACANCY

async def receive_vacancy(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_is_allowed(user_id):
        await update.message.reply_text("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.")
        return ConversationHandler.END

    context.user_data['vacancy'] = update.message.text
    keyboard = [
        [InlineKeyboardButton("–ì–æ—Ç–æ–≤–æ", callback_data="publish_vacancy")],
        [InlineKeyboardButton("–ù–∞–∑–∞–¥", callback_data="back_to_start")]
    ]
    await update.message.reply_text("–í–∞–∫–∞–Ω—Å–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞. –ù–∞–∂–º–∏—Ç–µ ¬´–ì–æ—Ç–æ–≤–æ¬ª, —á—Ç–æ–±—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞—Ç—å.",
                                    reply_markup=InlineKeyboardMarkup(keyboard))
    return CONFIRM_VACANCY

async def confirm_publish(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    if not user_is_allowed(user_id):
        await update.callback_query.answer("–î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â—ë–Ω.", show_alert=True)
        return ConversationHandler.END

    query = update.callback_query
    await query.answer()

    selected_channel = CHANNELS[context.user_data['channel']]
    vacancy_text = context.user_data['vacancy']

    await context.bot.send_message(
        chat_id=selected_channel,
        text=f"{vacancy_text}\n\n–†–∞–∑–º–µ—â–µ–Ω–æ —á–µ—Ä–µ–∑ @WorkDromBot"
    )

    await query.edit_message_text("‚úÖ –í–∞—à–∞ –≤–∞–∫–∞–Ω—Å–∏—è —É—Å–ø–µ—à–Ω–æ –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω–∞! –ß—Ç–æ–±—ã —Å–Ω–æ–≤–∞ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞, –Ω–∞–ø–∏—à–∏—Ç–µ /start –µ–º—É –≤ —á–∞—Ç!")
    return ConversationHandler.END

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–û–ø–µ—Ä–∞—Ü–∏—è –æ—Ç–º–µ–Ω–µ–Ω–∞.")
    return ConversationHandler.END

def main():
    application = Application.builder().token(BOT_TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            SELECT_ACTION: [
                CallbackQueryHandler(handle_action),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            SELECT_CHANNEL: [
                CallbackQueryHandler(select_channel),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            ENTER_VACANCY: [
                MessageHandler(filters.TEXT & ~filters.COMMAND, receive_vacancy),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            CONFIRM_VACANCY: [
                CallbackQueryHandler(confirm_publish, pattern="^publish_vacancy$"),
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            SHOW_INFO: [
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
            SHOW_SUPPORT: [
                CallbackQueryHandler(back_to_start, pattern="^back_to_start$")
            ],
        },
        fallbacks=[CommandHandler("cancel", cancel)],
    )

    application.add_handler(conv_handler)
    application.add_handler(CommandHandler("myid", get_my_id))
    application.job_queue.run_repeating(ping, interval=300, first=10)

    webhook_url = f"{RENDER_EXTERNAL_URL}/{BOT_TOKEN}"
    print(f"Webhook URL: {webhook_url}")

    application.run_webhook(
        listen="0.0.0.0",
        port=PORT,
        url_path=BOT_TOKEN,
        webhook_url=webhook_url,
    )

if __name__ == "__main__":
    main()
